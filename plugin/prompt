#!/usr/bin/env bash
# A fancy prompt that displays host, path, date/time and adjusts its width
# 
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2002-07-18
# Requires: bpm.utils bpm.events environment
################################################################################

shopt -s extglob
bash_plugin_load() {
    -prompt-setup() {
    ###############################################################################
    # ANSI color codes                                                            #
    ###############################################################################
    #         -foreground- ----bold---- -underline-- --reverse---   -background-  #
    # black         \e[30m     \e[30;1m     \e[30;4m     \e[30;7m    \e[40;fg;1m  #
    # red           \e[31m     \e[31;1m     \e[31;4m     \e[31;7m    \e[41;fg;1m  #
    # green         \e[32m     \e[32;1m     \e[32;4m     \e[32;7m    \e[42;fg;1m  #
    # yellow        \e[33m     \e[33;1m     \e[33;4m     \e[33;7m    \e[43;fg;1m  #
    # blue          \e[34m     \e[34;1m     \e[34;4m     \e[34;7m    \e[44;fg;1m  #
    # magenta       \e[35m     \e[35;1m     \e[35;4m     \e[35;7m    \e[45;fg;1m  #
    # cyan          \e[36m     \e[36;1m     \e[36;4m     \e[36;7m    \e[46;fg;1m  #
    # White         \e[37m     \e[37;1m     \e[37;4m     \e[37;7m    \e[47;fg;1m  #
    #                                                                             #
    # light black   \e[90m     \e[90;1m     \e[90;4m     \e[90;7m    \e[100;fg;1m #
    # light red     \e[91m     \e[91;1m     \e[91;4m     \e[91;7m    \e[101;fg;1m #
    # light green   \e[92m     \e[92;1m     \e[92;4m     \e[92;7m    \e[102;fg;1m #
    # light yellow  \e[93m     \e[93;1m     \e[93;4m     \e[93;7m    \e[103;fg;1m #
    # light blue    \e[94m     \e[94;1m     \e[94;4m     \e[94;7m    \e[104;fg;1m #
    # light magenta \e[95m     \e[95;1m     \e[95;4m     \e[95;7m    \e[105;fg;1m #
    # light cyan    \e[96m     \e[96;1m     \e[96;4m     \e[96;7m    \e[106;fg;1m #
    # light White   \e[97m     \e[97;1m     \e[97;4m     \e[97;7m    \e[107;fg;1m #
    #                                                                             #
    # Reset         \e[0m                                                         #
    ###############################################################################
    # (nice table from http://discussions.apple.com/message.jspa?messageID=12193195#12193508)
    local           red=$'\E[0;31m'
    local         green=$'\E[0;32m'
    local          blue=$'\E[0;34m'
    local          cyan=$'\E[0;36m'
    local       magenta=$'\E[0;35m'
    local        yellow=$'\E[0;33m'
    local         black=$'\E[0;30m'
    local          gray=$'\E[0;37m'
    local         white=$'\E[0;38m'
    local     light_red=$'\E[1;31m'
    local   light_green=$'\E[1;32m'
    local    light_blue=$'\E[1;34m'
    local    light_cyan=$'\E[1;36m'
    local light_magenta=$'\E[1;35m'
    local  light_yellow=$'\E[1;33m'
    local   light_white=$'\E[1;37m'
    local      no_color=$'\E[0m'

    bash_default prompt_filler "----------------------------------------"
    bash_default prompt_user "${LOGNAME:-$USER}"
    _find_prompt_host() {
        local domain= host=${1:-$HOSTNAME}
        if [[ -n "${prompt_domain:-}" ]]; then
            domain=$prompt_domain
            case $prompt_domain in .*) ;; *) domain=".$prompt_domain";; esac
        else # guess $prompt_domain unless explicitly set
            case $host in
                (+([0-9]).+([0-9]).+([0-9]).+([0-9]))
                    # do not curtail IPv4 addresses
                    domain= ;;
                *.corp.*)
                    # try to recognize corp.* names
                    domain=".corp.${host#*.corp.}" ;;
                *.local)
                    domain=.local ;;
                *) # otherwise assume other than the first component is the domain
                    domain=".${host#*.}"
            esac
        fi
        echo ${host%$domain}
    }
    bash_default prompt_host "$(_find_prompt_host "$HOSTNAME")"

    # a hack to measure how many columns given string takes
    prompt_takes_width() {
        local s=$1
        [[ -z ${s//[[:ascii:]]/} ]] ||
        # adjust the length of some non-ASCII characters
        # Most CJK characters are double the length of western/Latin ones.
        # TODO However, I would like to know how to avoid listing all the
        # Unicode block names here:
        s=$(perl -MUnicode::Normalize -MEncode -e '
        # Some Hangul (LVT) need normalization (decompose+canonical compose)
        $a = NFC(Encode::decode_utf8($ARGV[0]));
        $a =~ s/[\p{Han}\p{Hiragana}\p{Katakana}\p{Hangul}]/../g;
        print Encode::encode_utf8($a);
        ' "$s")
        echo ${#s}
    }

    # user part
    local user=${LOGNAME:-$USER}
    [ x"$user" != x"$prompt_user" ] || user=
    local user_plain=${user:+$user@}
    local user_part=${user:+"\[$blue\]$user\[$no_color\]@"}

    # date part
    local date_plain="$(date '+%Y-%m-%d%a%T')"
    local date_part="\D{$blue%Y-%m-%d$magenta%a}$light_yellow\t"
    if ! [ ${BASH_VERSINFO[0]} -gt 2 \
        -o ${BASH_VERSINFO[0]} == 2 -a ! "${BASH_VERSINFO[1]}" \< "05b" ]; then
        # prior to 2.05b, bash didn't handle custom date formats with \D{...}
        date_plain="DDD mmm dd HH:MM:SS"
        date_part="$blue\d $white\t"
    fi

    # sketch PS1
    local prompt_shlvl_part=; [[ $SHLVL -le 1 ]] || prompt_shlvl_part=$SHLVL
    local PS1_plain="($user_plain:"")--""(0?""&${prompt_shlvl_part:+$prompt_shlvl_part\$}$date_plain)"
    prompt_min_width=`prompt_takes_width "$PS1_plain"`

    # prompt_flexible_part update codes
    prompt_fill_part=
    prompt_pwd_part=
    prompt_pwd=
    prompt_exitstatus_part=
    prompt_jobs_part=
    prompt_jobs_part_is_empty=
    prompt_jobs=
    prompt_columns=
    prompt_update() {
        # gather some values
        local nrcolumns=${COLUMNS:-$(tput cols 2>/dev/null || true)}
        local nrjobs=`jobs -p`
        case $nrjobs in "") ;; *) nrjobs=" ${nrjobs//[0-9]/}" ;; esac
        nrjobs=${#nrjobs}
        if ! [ "$prompt_pwd"        = "$PWD"        \
            -a "$prompt_jobs"       = "$nrjobs"     \
            -a "$prompt_columns"    = "$nrcolumns"  \
            ]; then
            # be lazy; work hard only when something changed
            prompt_columns=$nrcolumns
            prompt_pwd=$PWD
            prompt_jobs=$nrjobs
            # hostname seldomly changes
            HOSTNAME=$(hostname -f 2>/dev/null || hostname)
            prompt_host=$(_find_prompt_host "$HOSTNAME")
            local pwd=${PWD/#$HOME/\~}
            local changing="$prompt_host$pwd$nrjobs"
            local fillsize=$(($nrcolumns-$prompt_min_width-`prompt_takes_width "$changing"`))
            if [ $fillsize -lt 0 ]; then
                # terminal is too narrow :( try to trim pwd
                prompt_fill_part=
                local abbrev="**"
                local dir=${pwd%/*} name=/${pwd##*/}
                local room=$((${#pwd} + $fillsize))
                # check if there's room for basename
                local withname="$abbrev${dir:$((${#abbrev}-$fillsize))}$name"
                if [ ${#withname} -le $room ]; then
                    pwd=$withname
                    # check there's room for prefix
                    local prefix=${dir:2} # (the root part better than ~/ or /)
                    prefix="${dir:0:2}${prefix%%/*}$abbrev"
                    withprefix="$prefix${dir:$((${#prefix}-$fillsize))}$name"
                    if [ ${#withprefix} -le $room ]; then
                        pwd=$withprefix
                    fi
                fi
            elif [ $fillsize -ge 0 ]; then
                # terminal is wide enough, fill it up!
                while [ ${#prompt_fill_part} -lt $fillsize ]; do
                    prompt_fill_part="${prompt_fill_part:-$prompt_filler}$prompt_fill_part"
                done
                prompt_fill_part="${prompt_fill_part:0:$fillsize}"
            fi
            prompt_pwd_part=$pwd
            prompt_jobs_part= prompt_jobs_part_is_empty=true
            [[ $nrjobs -le 0 ]] || prompt_jobs_part=$nrjobs prompt_jobs_part_is_empty=
        fi
    }
    # let prompt_update get regularly called by adding to $PROMPT_COMMAND
    bash_insert_prompt prompt_update

    # set window size dectection for $COLUMNS
    shopt -s checkwinsize

    # finally, replace PS1
    PS1="\
\[$no_color\](\
$user_part\
\[$red\]"'$prompt_host'"\[$no_color\]\
:\
\[$yellow\]"'$prompt_pwd_part'"\[$no_color\]\
)"\
'$prompt_fill_part'\
'${prompt_filler:0:$((3-${#?}))}'\
'${prompt_jobs_part_is_empty:+${prompt_filler:0:2}}'\
"(\
\[$cyan\]"'$?'"\[$no_color\]?\
\${prompt_jobs_part:+\[$green\]\$prompt_jobs_part\[$no_color\]&}\
${prompt_shlvl_part:+\[$magenta\]$prompt_shlvl_part\[$no_color\]$}\
$date_part\[$no_color\]\
)\n\\$ "
    }

    # do not automatically setup prompt on subshells unless configured to do so
    ! ${prompt_subshells:-false} || -prompt-setup
}

bash_plugin_interactive() {
    # automatically setup prompt on interactive shells
    -prompt-setup
}

# vim:et:ts=8:sw=4:sts=4
